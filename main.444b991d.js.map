{"version":3,"sources":["scripts/main.js"],"names":["baseURL","controller","AbortController","timeoutId","setTimeout","abort","getData","url","fetchResponse","fetch","signal","then","response","ok","Promise","reject","Error","status","statusText","headers","get","includes","clearTimeout","json","result","phonesIDs","map","phone","id","getPhonesDetails","IDsOfPhones","forEach","phoneID","pTag","document","createElement","phoneName","createTextNode","name","appendChild","getElementById"],"mappings":";AAAA,aAEA,IAAMA,EAAU,4DAEVC,EAAa,IAAIC,gBACjBC,EAAYC,WAAW,WAAMH,OAAAA,EAAWI,SAAS,KAEjDC,EAAU,SAACC,GAgBRC,OAfeC,MAAMF,EAAK,CAAEG,OAAQT,EAAWS,SACnDC,KAAK,SAACC,GAWEA,OAVFA,EAASC,IACZC,QAAQC,OAAOC,MAASJ,GAAAA,OAAAA,EAASK,OAAYL,OAAAA,OAAAA,EAASM,cAGnDN,EAASO,QAAQC,IAAI,gBAAgBC,SAAS,qBACjDP,QAAQC,OAAOC,MAAM,6BAGvBM,aAAanB,GAENS,EAASW,UAMtBjB,EAAWN,GAAAA,OAAAA,EAAX,iBAAkCW,KAAK,SAAAa,GAC/BC,IAAAA,EAAYD,EAAOE,IAAI,SAAAC,GAASA,OAAAA,EAAMC,KAE5CC,EAAiBJ,KAGnB,IAAMI,EAAmB,SAACC,GACxBA,EAAYC,QAAQ,SAAAC,GAClB1B,EAAWN,GAAAA,OAAAA,EAAkBgC,YAAAA,OAAAA,EAA7B,UACGrB,KAAK,SAAAa,GACES,IAAAA,EAAOC,SAASC,cAAc,KAC9BC,EAAYF,SAASG,eAAeb,EAAOc,MAEjDL,EAAKM,YAAYH,GACjBF,SAASM,eAAe,QAAQD,YAAYN","file":"main.444b991d.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst baseURL = 'https://mate-academy.github.io/phone-catalogue-static/api';\n\nconst controller = new AbortController();\nconst timeoutId = setTimeout(() => controller.abort(), 5000);\n\nconst getData = (url) => {\n  const fetchResponse = fetch(url, { signal: controller.signal })\n    .then((response) => {\n      if (!response.ok) {\n        Promise.reject(Error(`${response.status} - ${response.statusText}`));\n      }\n\n      if (!response.headers.get('content-type').includes('application/json')) {\n        Promise.reject(Error('Content-type is not JSON'));\n      }\n\n      clearTimeout(timeoutId);\n\n      return response.json();\n    });\n\n  return fetchResponse;\n};\n\ngetData(`${baseURL}/phones.json`).then(result => {\n  const phonesIDs = result.map(phone => phone.id);\n\n  getPhonesDetails(phonesIDs);\n});\n\nconst getPhonesDetails = (IDsOfPhones) => {\n  IDsOfPhones.forEach(phoneID => {\n    getData(`${baseURL}/phones/${phoneID}.json`)\n      .then(result => {\n        const pTag = document.createElement('p');\n        const phoneName = document.createTextNode(result.name);\n\n        pTag.appendChild(phoneName);\n        document.getElementById('data').appendChild(pTag);\n      });\n  });\n};\n"]}